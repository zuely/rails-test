require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.

# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.

# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/articles', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: 'Example Title',
      author: 'Jane Doe',
      body: 'This is a valid body with more than five characters.'
    }
  end

  let(:invalid_attributes) do
    {
      title: 'Invalid Article',
      author: 'John Doe',
      body: '12345' # too short
    }
  end

  describe 'GET /articles' do
    it 'renders a successful response' do
      get articles_url
      expect(response).to be_successful
    end
  end

  describe 'GET /articles/new' do
    it 'renders a successful response' do
      get articles_new_url
      expect(response).to be_successful
    end
  end

  describe 'GET /articles/:id' do
    it 'renders a successful response' do
      article = Article.create! valid_attributes
      get articles_view_url(article.id)
      expect(response).to be_successful
    end
  end

  describe 'GET /articles/:id/edit' do
    it 'renders a successful response by id' do
      article = Article.create! valid_attributes
      get articles_edit_url(article.id)
      expect(response).to be_successful
    end

    it 'renders a successful response by url' do
      article = Article.create! valid_attributes
      get articles_edit_url(article.url)
      expect(response).to be_successful
    end

    it 'renders a successful response by id-url' do
      article = Article.create! valid_attributes
      get articles_edit_url("#{article.id}-#{article.url}")
      expect(response).to be_successful
    end

    context 'with invalid article id' do
      it 'show errors' do
        get articles_edit_url(-1)
        expect(response).to be_successful
        expect(response.body).to include('<h1>404 Page not found</h1>')
      end
    end
  end

  describe 'POST /articles/new' do
    context 'with valid parameters' do
      it 'creates a new Article' do
        expect do
          post articles_new_url, params: { article: valid_attributes }
        end.to change(Article, :count).by(1)
      end

      it 'redirects to the created article' do
        post articles_new_url, params: { article: valid_attributes }
        expect(response).to redirect_to(articles_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Article' do
        expect do
          post articles_new_url, params: { article: invalid_attributes }
        end.to change(Article, :count).by(0)
      end

      it 'show errors' do
        post articles_new_url, params: { article: invalid_attributes }
        expect(response).to be_successful
        expect(response.body).to include('form-control is-invalid')
        expect(response.body).to include('invalid-feedback show')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'New Title'
        }
      end

      it 'updates the requested article' do
        article = Article.create! valid_attributes
        patch articles_edit_url(article.id), params: { article: new_attributes }
        article.reload
        expect(article.title).to eq('New Title')
        expect(article.author).to eq(valid_attributes[:author])
        expect(article.body).to eq(valid_attributes[:body])
      end

      it 'redirects to the article' do
        article = Article.create! valid_attributes
        patch articles_edit_url(article.id), params: { article: new_attributes }
        expect(response).to redirect_to(articles_url)
      end
    end

    context 'with invalid parameters' do
      it 'show errors' do
        article = Article.create! valid_attributes
        patch articles_edit_url(article.id), params: { article: invalid_attributes }
        expect(response).to be_successful
        expect(response.body).to include('form-control is-invalid')
        expect(response.body).to include('invalid-feedback show')
      end
    end

    context 'with invalid article id' do
      it 'show errors' do
        patch articles_edit_url(-1), params: { article: valid_attributes }
        expect(response).to be_successful
        expect(response.body).to include('<h1>404 Page not found</h1>')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested article' do
      article = Article.create! valid_attributes
      expect do
        delete articles_delete_url(article.id)
      end.to change(Article, :count).by(-1)
    end

    it 'redirects to the articles list' do
      article = Article.create! valid_attributes
      delete articles_delete_url(article.id)
      expect(response).to redirect_to(articles_url)
    end

    context 'with invalid article id' do
      it 'show errors' do
        delete articles_delete_url(-1)
        expect(response).to be_successful
        expect(response.body).to include('<h1>404 Page not found</h1>')
      end
    end
  end
end
